# real_time_show_melody.py
#!/usr/bin/env python3
"""
real_time_show_melody.py

Light show synchronized to the song's main melody (harmonic content only).
"""
import time
import threading
import pandas as pd
import pygame

from mapping import pixels, LED_COUNT

# Use the melody CSV generated by preprocess_audio_melody.py
CSV_PATH = "music/really_love_melody.csv"
WAV_PATH = "music/really_love.wav"

# Smoothing and gating parameters
SMOOTH_ALPHA    = 0.3    # brightness smoothing (0â€“1)
BRIGHTNESS_GATE = 10     # min brightness to update color
MIN_UPDATE_INTERVAL = 0.1  # minimum seconds between LED updates


def animate_from_csv_melody(csv_path=CSV_PATH, wav_path=WAV_PATH):
    df = pd.read_csv(csv_path)
    frames = df.to_dict('records')

    pygame.mixer.init()
    pygame.mixer.music.load(wav_path)
    pygame.mixer.music.play()

    clock = time.perf_counter
    start_time = clock()

    prev_scale = 0.0
    last_color = (0, 0, 0)
    last_up_time = 0.0

    for rec in frames:
        target = start_time + rec['time_sec']
        now = clock()
        delta = target - now
        if delta > 0:
            time.sleep(delta * 0.8)
            while clock() < target:
                pass

        # rate-limit updates
        if rec['time_sec'] - last_up_time < MIN_UPDATE_INTERVAL:
            continue
        last_up_time = rec['time_sec']

        # brightness smoothing
        raw_scale = rec['brightness'] / 255.0
        scale = prev_scale * SMOOTH_ALPHA + raw_scale * (1 - SMOOTH_ALPHA)
        prev_scale = scale

        # compute scaled color
        r = int(rec['R'] * scale)
        g = int(rec['G'] * scale)
        b = int(rec['B'] * scale)

        # update only if melody note present
        if rec['note'] != 'None' and rec['brightness'] >= BRIGHTNESS_GATE:
            last_color = (r, g, b)

        grb = (last_color[1], last_color[0], last_color[2])
        for i in range(LED_COUNT):
            pixels[i] = grb
        pixels.show()

    # fade-out
    for step in range(50, -1, -1):
        factor = step / 50.0
        dr = int(last_color[0] * factor)
        dg = int(last_color[1] * factor)
        db = int(last_color[2] * factor)
        grb_fade = (dg, dr, db)
        for i in range(LED_COUNT):
            pixels[i] = grb_fade
        pixels.show()
        time.sleep(1.0/50)


def start_realtime_show_melody():
    t = threading.Thread(target=animate_from_csv_melody, daemon=True)
    t.start()
    return t
